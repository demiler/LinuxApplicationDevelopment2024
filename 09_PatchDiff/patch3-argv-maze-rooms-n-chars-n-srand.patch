diff --git a/09_PatchDiff/maze.c b/09_PatchDiff/maze.c
index 59de1c7..a67ae41 100644
--- a/09_PatchDiff/maze.c
+++ b/09_PatchDiff/maze.c
@@ -2,14 +2,17 @@
 #include <stdlib.h>
 #include <time.h>
 
+char WALL = '#';
+char ROAD = '.';
+
 void createPath(char** maze, size_t n_rooms) {
     for (size_t i = 0; i < n_rooms; ++i) {
         for (size_t j = 0; j < n_rooms; ++j) {
             size_t x = j * 2 + 1, y = i * 2 + 1;
-            int up    = i > 0           && maze[y - 1][x] == '#';
-            int down  = i < n_rooms - 1 && maze[y + 1][x] == '#';
-            int left  = j > 0           && maze[y][x - 1] == '#';
-            int right = j < n_rooms - 1 && maze[y][x + 1] == '#';
+            int up    = i > 0           && maze[y - 1][x] == WALL;
+            int down  = i < n_rooms - 1 && maze[y + 1][x] == WALL;
+            int left  = j > 0           && maze[y][x - 1] == WALL;
+            int right = j < n_rooms - 1 && maze[y][x + 1] == WALL;
 
             int possible_directions = up + down + left + right;
             if (possible_directions == 0) continue;
@@ -17,25 +20,25 @@ void createPath(char** maze, size_t n_rooms) {
             switch (direction) {
                 case 0:
                     if (up) {
-                        maze[y - 1][x] = '.';
+                        maze[y - 1][x] = ROAD;
                         break;
                     }
                     else ++direction;
                 case 1:
                     if (down) {
-                        maze[y + 1][x] = '.';
+                        maze[y + 1][x] = ROAD;
                         break;
                     }
                     else ++direction;
                 case 2:
                     if (left) {
-                        maze[y][x - 1] = '.';
+                        maze[y][x - 1] = ROAD;
                         break;
                     }
                     else ++direction;
                 case 3:
                     if (right) {
-                        maze[y][x + 1] = '.';
+                        maze[y][x + 1] = ROAD;
                     }
                     break;
             }
@@ -44,16 +47,37 @@ void createPath(char** maze, size_t n_rooms) {
 }
 
 int main(int argc, char *argv[]) {
-    srand(time(NULL));
+    if (argc != 4) {
+        printf("Usage: maze <srand arg> '#.' <maze #rooms>\n");
+        exit(1);
+    }
+
+    unsigned int randomness = atoi(argv[1]);
+    if (randomness == 0) {
+        printf("ERROR: bad srand arg '%s'\n", argv[1]);
+        exit(2);
+    }
+    srand(randomness);
 
-    size_t n_rooms = 6;
+    WALL = argv[2][0];
+    ROAD = argv[2][1];
+    if (!WALL || !ROAD) {
+        printf("ERROR: bad wall and road argument '%s'\n", argv[2]);
+        exit(3);
+    }
+
+    size_t n_rooms = atoi(argv[3]);
+    if (n_rooms == 0) {
+        printf("ERROR: bad room number argument '%s'\n", argv[2]);
+        exit(2);
+    }
     const size_t maze_size = n_rooms * 2 + 1;
 
     char **maze = (char**)malloc(sizeof(void*) * maze_size);
     for (size_t i = 0; i < maze_size; ++i) {
         maze[i] = (char*)malloc(sizeof(char) * (maze_size + 1));
         for (size_t j = 0; j < maze_size; ++j) {
-            maze[i][j] = i % 2 && j % 2 ? '.' : '#';
+            maze[i][j] = i % 2 && j % 2 ? ROAD : WALL;
         }
         maze[i][maze_size] = 0;
     }
